import pandas as pd
import xml.etree.ElementTree as ET
import os
import itertools
import numpy as np
import csv

# Two different functions combined into one file- functions one and two are not intended to be run simulataneously

def directories_one():
    rootdir = "./global_vulnerability_model"
    location_dict = {}
    for subdir, dirs, files in os.walk(rootdir):
        for file in files:
            subdir = subdir.replace('\\', '/')
            filepath = subdir + '/' + file
            if filepath.endswith("vulnerability_structural.xml"):
                coverage_type = 'Structural'
                location = subdir.replace('./global_vulnerability_model/', '').replace('/', ' ').split()
                location_dict [location[0], location[1]] = filepath
    return location_dict

def get_taxonomies_one(location_list):
    tax_ids= {}
    cur_tax_id = 1
    for (continent, country) in location_list:
        pathway = location_list[(continent, country)]
        tree = ET.parse(pathway)
        root = tree.getroot()
        
        for i in range (len(root[0])-1):
            for j in root[0][i+1][0].text.strip().split(' '):
                taxonomy = root[0][i+1].attrib['id']
                if taxonomy not in tax_ids:
                    tax_ids[taxonomy] = cur_tax_id
                    cur_tax_id += 1
                    rec = {
                        # "TaxID": tax_ids[taxonomy], 
                        "Taxonomy": taxonomy
                    }
                    yield rec

def directories_two():
    rootdir = "./global_vulnerability_model"
    location_dict = {}
    select_countries = ['Japan', 'Peru','Costa_Rica', 'Nepal']
    for select in select_countries:
        for subdir, dirs, files in os.walk(rootdir):
            for file in files:
                subdir = subdir.replace('\\', '/')
                filepath = subdir + '/' + file
                if filepath.endswith("vulnerability_structural.xml"):
                    coverage_type = 'Structural'
                    location = subdir.replace('./global_vulnerability_model/', '').replace('/', ' ').split()
                    if location[1] == select:
                        location_dict [location[0], location[1], coverage_type] = filepath
                elif filepath.endswith("vulnerability_contents.xml"):
                    coverage_type = 'Contents'
                    location = subdir.replace('./global_vulnerability_model/', '').replace('/', ' ').split()
                    if location[1] == select:
                        location_dict [location[0], location[1], coverage_type] = filepath
    return location_dict

def get_taxonomies_two(location_list):
    
    count = 0
    for (continent, country, cov_type) in location_list:
        count += 1
        tax_ids= {}
        cur_tax_id = 1
        pathway = location_list[(continent, country, cov_type)]
        tree = ET.parse(pathway)
        root = tree.getroot()
        rec = []
        for i in range (len(root[0])-1):
            for j in root[0][i+1][0].text.strip().split(' '):
                taxonomy = root[0][i+1].attrib['id']
                if taxonomy not in tax_ids:
                    tax_ids[taxonomy] = cur_tax_id
                    cur_tax_id += 1
                    # rec = {
                    #     "TaxID": tax_ids[taxonomy], 
                    #     "Taxonomy": taxonomy
                    # }
                    rec.append(taxonomy) 
        # df_name = 'df{num}'.format(num=count) 
        df_name = pd.DataFrame([rec])
        df_name = df_name.transpose()
        df_name  = df_name.rename(columns = {0: "Taxonomy"})
        # print (df_name.head(5))
        df_name.to_csv('VulnerabilityLibrary/Testing/{place}_{kind}_taxonomies.csv'.format(place=country, kind = cov_type), index=False)

def all_unique_taxs():    
    directory = directories_one()
    location_list = directory
    header = get_taxonomies_one(location_list)
    df = pd.DataFrame(header)
    # print (df.head(5))
    df.to_csv('GEM/taxonomies.csv', index=False)

def some_unique_taxs():
    location_list = directories_two()
    get_taxonomies_two(location_list)

def main():    
    some_unique_taxs()

main()