import rasterio
import numpy as np
import pandas as pd
import csv
from decimal import Decimal
from pathlib import PurePath,PurePosixPath
import sys

working_folder = 'VulnerabilityLibrary'
raster_filepath = 'GlobalFloodingVariants/PH_TW_20240724_Typhoon_Gaemi_FLRF_D_RD_30m_4326.tif'
oasis_footprint_filepath = 'GlobalFloodingVariants/footprint.csv'
area_peril_dict_filepath = 'GlobalFloodingVariants/area_peril_dict.csv'
footprint_fieldnames = ["event_id","area_peril_id","intensity_bin_id","probability"]
area_peril_dict_fieldnames = ["area_peril_id","longitude","latitude"]
int_input_path = 'intensity_bins_input.csv'
int_dict_path = 'intensity_bin_dict.csv'

with rasterio.open(raster_filepath) as image:
         
    max_lat = image.bounds[3]
    min_lat = image.bounds[1]
    max_long = image.bounds[2]
    min_long = image.bounds[0]
    no_height_pixels = image.height
    no_width_pixels = image.width
    raster = image.read(1)

def init_run(working_folder):
    model_path = PurePath(__file__)
    parent = model_path.parents
    for each in parent:
        if PurePosixPath(each).name == working_folder:
            path_stem = each
    return path_stem

def init_int_bins(path_stem):
    # create three lists for lower bound, upper bound and mid point point values of intensity bins
    int_bin_vals = []
    int_bins = []
    int_mp_vals = []
    with open(PurePath.joinpath(path_stem, int_input_path)) as bins_file:
        # Read in bins data from opened file
        for i, line in enumerate (bins_file):
            line = line.strip()
            if i:
                line = float(line)
                int_bin_vals.append(line)
                # condition to repeat first value
                if not (i-1):
                    int_bin_vals.append(line)
            else:
                continue
        # repeat last intensity value
        int_bin_vals.append(int_bin_vals[-1])
        for i in range (len(int_bin_vals)-1):
            int_bins.append((int_bin_vals[i], int_bin_vals[i+1]))
        int_bins = np.array(int_bins, dtype = float)
        for int_bin in int_bins:
            int_mp_val = (int_bin[0] + int_bin[1]) / 2
            int_mp_vals.append(round(int_mp_val, 16))
    # check for monotonicity
    if sorted(int_bin_vals) != int_bin_vals:
        print ('input intensity bins must be arranged in order of size...')
        sys.exit()
    return int_bins, int_mp_vals

def create_int_bins(int_bins, int_mp_vals, int_mes_types):
    # create function to find unique intensity measurement types
    index_num = 1
    for type in int_mes_types:
            for int_bin, int_mp_val in zip(int_bins, int_mp_vals):
                int_bin_dict = {'bin_index': index_num,
                                'intensity_measurement_type': type,
                                'bin_from': int_bin[0], 
                                'bin_to': int_bin[1], 
                                'interpolation': int_mp_val
                                }
                index_num += 1
                yield int_bin_dict

'''def create_intensity_bins(no_bins,bin_size):

    dec = Decimal(str(bin_size))
    no_dp = (-1 * dec.as_tuple()[2])

    for i in range(no_bins):
        bin_min = np.round(i * bin_size, no_dp)
        bin_max = np.round((i+1) * bin_size, no_dp)
        interpolation = (bin_min + bin_max) / 2
        intesity_bin = {'intensity_bin_id': i+1, 'bin_from': bin_min, 'bin_to': bin_max, 'interpolation': interpolation}
        yield intesity_bin'''

def create_footprint(int_bins):

    areaperil_id = 0

    for row in raster:
        for intensity in row:

            if intensity < -3e+38:
                continue
            
            areaperil_id += 1

            bin_from_differences = intensity - int_bins['bin_from']
            bin_to_differences = int_bins['bin_to'] - intensity
            differences_multiplied = bin_to_differences * bin_from_differences
            
            intensity_bin_id = int_bins['bin_index'][differences_multiplied.idxmax()] #Edge Case for when intensity value is equal to a bin edge value is currently being assigned the lower intensity bin_id
            footprint_row = { "event_id": 1, "area_peril_id": areaperil_id, "intensity_bin_id": intensity_bin_id, "probability": 1}
            yield footprint_row
            
def create_areaperil_dict():
    
    width_per_pixel = (max_long - min_long) / no_width_pixels
    height_per_pixel = (max_lat - min_lat) / no_height_pixels

    lat_incr = 0
    areaperil_id = 0
    
    for row in raster:
        
        long_incr = 0
        latitude = height_per_pixel * (0.5 + lat_incr) + min_lat

        for intensity in row:
            
            longitude = width_per_pixel * (0.5 + long_incr) + max_long
            long_incr += 1
            
            if intensity < -3e+38:
                continue
            
            areaperil_id += 1
            areaperil_dict = { "area_peril_id": areaperil_id, "longitude": longitude, "latitude": latitude}
            yield areaperil_dict
        lat_incr += 1

def create_files(filepaths, fieldnames, generators):

    for i in range(len(filepaths)):
        
        with open(filepaths[i], mode='w', newline='') as file:

            writer = csv.DictWriter(file, fieldnames[i])

            writer.writeheader()

            for row in generators[i]:
                writer.writerow(row)


def main(working_folder = 'VulnerabilityLibrary', int_mes_types = ['flood']):
    
    path_stem = init_run(working_folder)

    int_bins, int_mp_vals = init_int_bins(path_stem)
    int_bins_dict = create_int_bins(int_bins, int_mp_vals, int_mes_types)

    int_bins_df = pd.DataFrame(int_bins_dict)
    int_bin_dict_path = PurePath.joinpath(path_stem, int_dict_path)
    
    int_bins_df.to_csv(int_bin_dict_path, index=False)

    create_files([oasis_footprint_filepath,area_peril_dict_filepath], [footprint_fieldnames,area_peril_dict_fieldnames], [create_footprint(int_bins_df), create_areaperil_dict()])

main()