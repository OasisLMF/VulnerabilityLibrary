import pandas as pd
import xml.etree.ElementTree as ET
import numpy as np
from scipy import interpolate
from scipy.stats import beta
import time
import sys
import argparse
from pathlib import PurePosixPath, PurePath, Path

# include functional test that runs on 2 files - don't test intermediary file

parser = argparse.ArgumentParser(description = "Set up paths to receive inputs and output files to for vulnerability function data")
parser.add_argument('-W', "--working-folder", default='VulnerabilityLibrary', help = "input the name of the folder containing the source code and the oasis lmf model")
parser.add_argument('-d', "--num-damage-bins", default=100, type=int, help = "input number of damage bins")
parser.add_argument('-M', "--oasis-model-folder", default='global_earthquake_variants', help = "input name of folder containing the files and data to run oasis lmf model")
parser.add_argument('-count', "--country-specific", default='', nargs='+', help = "to analyse specific countries, input the name of which one to run the model on")
parser.add_argument('-cont', "--continent-specific", default='', nargs='+', help = "to analyse specific continents, input the name of which one to run the model on")


# default paths for input/output files
int_input_path = 'intensity_bins_input.csv'
int_dict_path = 'intensity_bin_dict.csv'
dam_bin_path = 'model_data/damage_bin_dict.csv'
vuln_dict_path = 'keys_data/vulnerability_dict.csv'
vulnerability_path = 'model_data/vulnerability.csv'
rel_height_path = 'keys_data/height_dict.csv'
rel_occup_path = 'keys_data/occupancy_dict.csv'
rel_constr_path = 'keys_data/construction_dict.csv'
rel_countr_path = 'keys_data/country_dict.csv'

# Notes on references for using tree and root method to analyse xml files
    # Intensity Measurement Type is root[0][i][0].attrib['imt']
    # Taxonomy is root[0][i].attrib['id']
        # Taxonomy [0]
        # Taxonomy [1]
        # Taxonomy [-1] 
    # Intensity is root[0][i][0].text
    # Mean Loss Ratio is root[0][i][1].text
    # Coefficient of Variation is root[0][i][2].text

def init_run(working_folder):
    model_path = PurePath(__file__)
    parent = model_path.parents
    for each in parent:
        if PurePosixPath(each).name == working_folder:
            path_stem = each
    return path_stem

def init_int_bins(path_stem):
    # create three lists for lower bound, upper bound and mid point point values of intensity bins
    int_bin_vals = []
    int_bins = []
    int_mp_vals = []
    with open(PurePath.joinpath(path_stem, int_input_path)) as bins_file:
        # Read in bins data from opened file
        for i, line in enumerate (bins_file):
            line = line.strip()
            if i:
                line = float(line)
                int_bin_vals.append(line)
                # condition to repeat first value
                if not (i-1):
                    int_bin_vals.append(line)
            else:
                continue

        # repeat last intensity value
        int_bin_vals.append(int_bin_vals[-1])
        for i in range (len(int_bin_vals)-1):
            int_bins.append((int_bin_vals[i], int_bin_vals[i+1]))
        int_bins = np.array(int_bins, dtype = float)
        for int_bin in int_bins:
            int_mp_val = (int_bin[0] + int_bin[1]) / 2
            int_mp_vals.append(round(int_mp_val, 16))

    # check for monotonicity
    if sorted(int_bin_vals) != int_bin_vals:
        print ('input intensity bins must be arranged in order of size...')
        sys.exit()
    return int_bins, int_mp_vals

def create_int_bins(int_bins, int_mp_vals, int_mes_types):
    # create function to find unique intensity measurement types
    index_num = 1
    for type in int_mes_types:
            for int_bin, int_mp_val in zip(int_bins, int_mp_vals):
                int_bin_dict = {'bin_index': index_num,
                                'intensity_measurement_type': type,
                                'bin_from': int_bin[0], 
                                'bin_to': int_bin[1], 
                                'interpolation': int_mp_val
                                }
                index_num += 1
                yield int_bin_dict

def init_damage_bins(incr):
    damage_bins = []
    # create list of values in the damage bins - first and last values repeated so bin creation is simpler
    dam_bin_vals = np.arange(0, 1 + incr, incr)
    dam_bin_vals = np.append (dam_bin_vals[0], dam_bin_vals)
    dam_bin_vals = np.append(dam_bin_vals, dam_bin_vals[-1])

    # create damage bins [a,b)
    for i in range (len(dam_bin_vals)-1):
        damage_bins.append((dam_bin_vals[i], dam_bin_vals[i+1]))
    damage_bins = np.array(damage_bins, dtype = float)

    # rounding decimal places results in division accuracy errors
    dam_bin_vals = [np.round(dam_bin, 12) for dam_bin in dam_bin_vals]
    damage_bins_list = [dam for dam in dam_bin_vals]
    # damage_bins_list returns list of damage bin values not including the repeated start and end values 
    return damage_bins, damage_bins_list[1:-1]

def create_damage_bins(damage_bins):
    damage_bin_dict = {}
    index_num = 1
    for dam_bin in damage_bins:
        interp_val = (dam_bin[0] + dam_bin[1]) / 2
        interp_val = round(interp_val, 16)
        damage_bin_dict = {'bin_index': index_num,
                        'bin_from': "{:.6f}".format(dam_bin[0]),
                        'bin_to': "{:.6f}".format(dam_bin[1]), 
                        'interpolation': "{:.6f}".format(interp_val)
                        }
        index_num += 1
        yield damage_bin_dict

def get_bin_index(int_bins, int_mp_vals, int_mes_types, intensity_measure):
    bin_index_list = []
    start_index = 1
    num_intensity_bins = len(int_bins)

    # Intensity bin indexes range: e.g. from 1-20 (flood depth) if 20 input hazard intensity bins
    for i, int_mes_type in enumerate(int_mes_types):
        if intensity_measure == int_mes_type:
            start_index += i * num_intensity_bins
    for int_mp_val in int_mp_vals:
        for i in range(len(int_bins)):
            # edge case: if hazard intensity value is below or equal to lower bound of smallest bin
            if (not(i) and int_mp_val <= int_bins[0][0]):
                bin_index = start_index
                break
            # edge case: if hazard intensity value is greater than or equal to upper bound of largest bin
            elif int_mp_val >= int_bins[-1][0]:
                bin_index = start_index + (len(int_bins) - 1)
                break
            elif int_bins[i][0] <= int_mp_val < int_bins[i][1]:
                bin_index = start_index + (i)
                break
        bin_index_list.append(bin_index)
    return bin_index_list

def create_vuln_dict(val_id, bin_index_list, damage_bins):
    for bin_index in bin_index_list:
        for k in range(len(damage_bins)):
            rec = {
                "vulnerability_id": val_id[0],
                "intensity_bin_id": bin_index,
                "damage_bin_id": "{:.0f}".format(k+1),
                }
            yield rec

# unit test with doc test
def compute_probs(int_vals, int_mp_vals, mean_LRs, std_devs, damage_bins_list):
    a=0
    b=1
    probs = {}

    # could use numpy interp - check advantages
    # edge cases: bounds error is used when int_mp_vals (intensity bins) are above or below the range of intensity values 
    int_vs_mean = interpolate.interp1d(int_vals, mean_LRs, kind='linear', bounds_error=False, fill_value= (mean_LRs[0], mean_LRs[-1]))
    int_vs_std = interpolate.interp1d(int_vals, std_devs, kind='linear', bounds_error=False, fill_value= (std_devs[0], std_devs[-1]))
    # function created above can take in list of values to use for interpolation - seen below
    interp_mean = int_vs_mean (int_mp_vals)
    interp_std_dev = int_vs_std (int_mp_vals)

    for j, (mean_val, std_dev_val) in enumerate (zip(interp_mean, interp_std_dev)):
        # edge case if parametrisation cannot be made due to zero mean loss ratio and standard deviation of loss ratio
        if mean_val == 0 and std_dev_val == 0:
            cum_diff_vals = np.append(1, np.zeros(len(cum_diff_vals)-1))
        else:
            # Beta paramters for last few bins are very large, indicating dirac delta function shape which makes sense
            # High intensity leads to high damage almost 100% of the time
            # Zero mean, and small std deviation => beta value 1000x order of magnitude of alpha => J shaped distribution
            alpha_val = (mean_val-a)/(b-a) * ((mean_val*(1-mean_val)/std_dev_val**2) - 1)
            beta_val = alpha_val * (1-mean_val) / mean_val
            # Beta function automatically runs has start and end interval from 0 to 1
            prob_vals = beta.cdf(damage_bins_list, alpha_val, beta_val)            
            # Generally, first damage bin has proabbility zero since it is a single value not a range- same for last damage bin that only represents single damage value
            # Exception for first damage bin since and hazard intensity bin representing zero intensity => no damage
            cum_diff_vals = list(np.diff(prob_vals, axis=0, prepend=0, append=prob_vals[-1]))
            # cum_diff_vals = np.append(cum_diff_vals, 0)
            # damage_bins_list[0] == 0 should always be true so line below really only checks if the current intensity bin index being run is hazard intensityh zero
            # NEED TO CHANGE J CONDITION!!!
            if not (j) and damage_bins_list[0] == 0:
                cum_diff_vals = np.append(1, np.zeros(len(cum_diff_vals)-1))
            # if j == 0:
                # print (cum_diff_vals, len(cum_diff_vals), sum(cum_diff_vals))
        for prob in cum_diff_vals:
            probs = {'probabilities': "{:.6f}".format(prob)
                }
            yield probs

def get_codes(header_name, path, extra_keys_in=None, id_suffix='_id'):
    mapping_dict = {}
    header = True
    if header_name == 'occupancy':
        temp_header_name = 'attribute6'
    else: 
        temp_header_name = header_name
    if extra_keys_in == None:
        extra_keys = []
    else:
        extra_keys = extra_keys_in

    with open(path, "r") as file: 
        for line in file:
            data = line.strip().split(',')
            if header:    
                header_index = data.index(temp_header_name)
                id_index = data.index(f'{header_name}{id_suffix}')
                extra_index = [data.index(extra_key) for extra_key in extra_keys]
                header = False
                continue
            if extra_keys:
                key = tuple([data[header_index]] + [data[index] for index in extra_index])
            else:
                key = data[header_index]
            mapping_dict[key] = data[id_index]
    return mapping_dict
